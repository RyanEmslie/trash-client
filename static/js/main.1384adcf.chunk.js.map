{"version":3,"sources":["components/MyForm/MyForm.jsx","components/DataList/DataList.jsx","components/MyHeader/MyHeader.jsx","components/Layout/Layout.jsx","App.js","serviceWorker.js","index.js"],"names":["MyForm","react_default","a","createElement","Form","id","FormGroup","Label","for","Input","onChange","this","props","formChanged","type","name","placeholder","Button","onClick","formSubmit","React","Component","DataList","fetchHeroku","_this","propsTwo","dataList","hasLoaded","finalArr","fetchArr","map","data","index","Col","xs","sm","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","comment","date","color","className","deleteItem","Container","Row","MyHeader","Jumbotron","fluid","Layout","state","formInfo","passUp","e","console","log","setState","_e$target","target","value","prevState","Object","objectSpread","defineProperty","axios","post","then","catch","error","updateState","concat","toConsumableArray","clearForm","document","querySelector","getAttribute","delID","delete","fetch","res","json","_this$state$formInfo","Fragment","components_MyHeader_MyHeader","MyForm_MyForm","DataList_DataList","App","Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1384adcf.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import './App.css'\n\n\nexport default class MyForm extends React.Component {\n  render() {\n    return (\n      <Form id=\"myForm\">\n        <FormGroup>\n          <Label for=\"userName\">Name</Label>\n          <Input onChange={this.props.formChanged} type=\"text\" name=\"name\" id=\"userName\" placeholder=\"enter your name\" />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleText\">Comment</Label>\n          <Input onChange={this.props.formChanged} type=\"textarea\" name=\"comment\" id=\"exampleText\" placeholder=\"please leave a comment\"/>\n        </FormGroup>\n        <Button onClick={this.props.formSubmit}>Submit</Button>\n      </Form>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  ListGroupItemText,\n  Button,\n  Container,\n  Row,\n  Col\n} from 'reactstrap';\n\nexport default class DataList extends Component {\n\n  componentDidMount() {\n    this.props.fetchHeroku();\n  }\n\n  render() {\n    if (this.props.propsTwo.dataList.hasLoaded) {\n      const { fetchArr } = this.props.propsTwo.dataList;\n\n      //!\n      //!Where would I put the key for the map function\n      //!\n      const finalArr = fetchArr.map((data, index) => {\n        return (\n              <Col xs=\"6\" sm=\"4\">\n                <ListGroup id=\"myListGroup\">\n                  <ListGroupItem>\n                    <ListGroupItemHeading>{data.name}</ListGroupItemHeading>\n                    <ListGroupItemText>{data.comment}</ListGroupItemText>\n                    <ListGroupItemText>{data.date}</ListGroupItemText>\n                    <Button\n                      type=\"submit\"\n                      color=\"danger\"\n                      // key={markerItem.date}\n                      id={index}\n                      className=\"remove-btn location-lists\"\n                      onClick={this.props.deleteItem}>\n                      Delete\n                    </Button>\n                  </ListGroupItem>\n                </ListGroup>\n              </Col>\n            \n         \n        );\n      });\n      return <div> <Container><Row>{finalArr} </Row></Container></div>;\n    } else {\n      return null;\n    }\n  }\n}\n","import React from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport './myHeader.css'\n\nconst MyHeader = () => {\n  return (\n    <div id='myHeader'>\n      <Jumbotron fluid>\n        <Container fluid>\n          <h1 className=\"display-3\">Emslie Test Deployment</h1>\n          <p className=\"lead\">The React frontend is deployed on Github Pages and the node backend is deployed on Heroku with a MongoDB</p>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default MyHeader;","import React from 'react';\n\nimport MyForm from '../MyForm/MyForm';\nimport DataList from '../DataList/DataList';\nimport MyHeader from '../MyHeader/MyHeader';\nimport axios from 'axios';\n// import axios from 'axios'\n\n// Your parent component manages the state that is the props for all child components.\n// This .setState on the parent component will update all of the props for child components.\n\n// Also a child component can modify the parent component by calling the \n// Parent component function that was passed in as props.\n// That function usually does this.setState and is called by people at my old company a toaster function.\n\nexport default class Layout extends React.Component {\n  state = {\n    formInfo: {\n      name: '',\n      comment: ''\n    },\n    dataList: {\n      fetchArr: [],\n      hasLoaded: false\n    }\n  };\n\n  passUp = e => {\n    console.log(e)\n    this.setState({\n      formInfo: {\n        name: e.name,\n        comment: e.comment\n      }\n\n    })\n  };\n\n  // DataList functions:\n\n  formChanged = e => {\n    const { name, value } = e.target;\n    this.setState(prevState => ({\n      formInfo: {\n        ...prevState.formInfo,\n        [name]: value\n      }\n    }));\n  };\n\n  formSubmit = e => {\n        axios\n          .post(\"https://trash-server-rte.herokuapp.com/api/testData\", {\n            name: this.state.formInfo.name,\n            comment: this.state.formInfo.comment,\n            })\n        .then(console.log(\"Updated api successfully\"))\n        .catch(error => console.log(\"Update failed\", {error}))\n        this.updateState(\n          this.state.formInfo.name,\n          this.state.formInfo.comment\n        )\n       \n    }\n \n  updateState = (name, comment) => {\n    console.log('updating state locally (client side)', {name, comment})\n    // this.setState({\n    //   formInfo: {name, comment},\n    //   dataList: {fetchArr: [ this.state.formInfo, ...this.state.dataList.fetchArr ]}\n    // })\n\n    this.state.formInfo.name = name;\n    this.state.formInfo.comment = comment;\n    this.state.dataList.fetchArr = [ this.state.formInfo, ...this.state.dataList.fetchArr ]\n    this.setState({\n      formInfo: this.state.formInfo,\n      dataList: this.state.dataList\n    })\n\n    this.clearForm()\n  }\n \n  clearForm = () => {\n    document.querySelector('#userName').value = '';\n    document.querySelector('#exampleText').value = '';\n  }\n  // deletes items from locations list\n  deleteItem = e => {\n    console.log('DELETE');\n    console.log(e.target.getAttribute('id'));\n    const delID = e.target.getAttribute('id');\n    axios.delete(\n      `https://trash-server-rte.herokuapp.com/api/testData/${delID}`\n    );\n    this.setState({\n      dataList: {hasLoaded: false},\n      /* hasLoaded: false */\n    });\n    this.fetchHeroku();\n  };\n\n  fetchHeroku = () => {\n    console.log('GET');\n    fetch('https://trash-server-rte.herokuapp.com/api/testData')\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          dataList: {fetchArr: res, hasLoaded: true},\n          /* dataList: {fetchArr: res}, */\n          /* dataList: {hasLoaded: true */\n        });\n      });\n  };\n\n\n  render() {\n    const { name, comment } = this.state.formInfo;\n    return (\n      <>\n        <MyHeader />\n        <MyForm \n          name={name} comment={comment}\n          formChanged={this.formChanged} formSubmit={this.formSubmit}\n        />\n        <DataList \n          propsTwo={this.state}\n          formChanged={this.formChanged} formSubmit={this.formSubmit} \n          clearForm={this.clearForm} updateState={this.updateState}\n          deleteItem={this.deleteItem} fetchHeroku={this.fetchHeroku}\n        />\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport Layout from './components/Layout/Layout';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}