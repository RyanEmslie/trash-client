{"version":3,"sources":["components/MyForm/MyForm.jsx","components/DataList/DataList.jsx","components/MyHeader/MyHeader.jsx","components/Layout/Layout.jsx","App.js","serviceWorker.js","index.js"],"names":["MyForm","state","formInfo","name","_this","props","comment","formChanged","e","_e$target","target","value","setState","prevState","Object","objectSpread","defineProperty","formSubmit","axios","post","then","console","log","passUp","clearState","clearForm","document","querySelector","react_default","a","createElement","Form","id","FormGroup","Label","for","Input","onChange","this","type","placeholder","Button","onClick","React","Component","DataList","fetchArr","hasLoaded","deleteItem","getAttribute","delID","delete","concat","fetchHeroku","fetch","res","json","_this2","finalArr","map","data","Col","xs","sm","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","date","color","_id","className","Container","Row","MyHeader","Jumbotron","fluid","Example","dataList","_this$state$formInfo","Fragment","components_MyHeader_MyHeader","MyForm_MyForm","DataList_DataList","App","Layout_Example","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ec763c7.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nimport axios from 'axios'\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import './App.css'\n\n\nexport default class MyForm extends React.Component {\n \n state = {\n   formInfo: {\n   name: this.props.name,\n   comment: this.props.comment\n   }\n }\n\n  formChanged = e => {\n    const { name, value } = e.target;\n    this.setState(prevState => ({\n      formInfo: {\n        ...prevState.formInfo,\n        [name]: value\n      }\n    }));\n  };\n\n  formSubmit = e => {\n        axios\n          .post(\"https://trash-server-rte.herokuapp.com/api/testData\", {\n            name: this.state.formInfo.name,\n            comment: this.state.formInfo.comment,\n            })\n          .then(console.log(\"Posted\"));\n        this.props.passUp(this.state.formInfo)\n        this.clearState()\n        \n       \n    }\n \n  clearState = () => {\n    console.log('This is clearForm')\n    this.setState({\n      formInfo:{\n        name: '',\n        comment: ''\n      }\n    })\n    this.clearForm()\n  }\n \n  clearForm = () => {\n    document.querySelector('#userName').value = '';\n    document.querySelector('#exampleText').value = '';\n     }\n\n  render() {\n    return (\n      <Form id=\"myForm\">\n        <FormGroup>\n          <Label for=\"userName\">Name</Label>\n          <Input onChange={this.formChanged} type=\"text\" name=\"name\" id=\"userName\" placeholder=\"enter your name\" />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleText\">Comment</Label>\n          <Input onChange={this.formChanged} type=\"textarea\" name=\"comment\" id=\"exampleText\" placeholder=\"please leave a comment\"/>\n        </FormGroup>\n        <Button onClick={this.formSubmit}>Submit</Button>\n      </Form>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  ListGroupItemText,\n  Button,\n  Container,\n  Row,\n  Col\n} from 'reactstrap';\nimport axios from 'axios';\n\nexport default class DataList extends Component {\n  state = {\n    fetchArr: [],\n    hasLoaded: false\n  };\n\n  componentDidMount() {\n    this.fetchHeroku();\n  }\n\n  // deletes items from locations list\n  deleteItem = e => {\n    console.log('DELETE');\n    console.log(e.target.getAttribute('id'));\n    const delID = e.target.getAttribute('id');\n    axios.delete(\n      `https://trash-server-rte.herokuapp.com/api/testData/${delID}`\n    );\n    this.setState({\n      hasLoaded: false\n    });\n    this.fetchHeroku();\n  };\n\n  fetchHeroku = () => {\n    console.log('GET');\n    fetch('https://trash-server-rte.herokuapp.com/api/testData')\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          fetchArr: res,\n          hasLoaded: true\n        });\n      });\n  };\n\n  render() {\n    if (this.state.hasLoaded) {\n      const { fetchArr } = this.state;\n\n      //!\n      //!Where would I put the key for the map function\n      //!\n      const finalArr = fetchArr.map(data => {\n        return (\n         \n           \n              <Col xs=\"6\" sm=\"4\">\n                <ListGroup id=\"myListGroup\">\n                  <ListGroupItem>\n                    <ListGroupItemHeading>{data.name}</ListGroupItemHeading>\n                    <ListGroupItemText>{data.comment}</ListGroupItemText>\n                    <ListGroupItemText>{data.date}</ListGroupItemText>\n                    <Button\n                      type=\"submit\"\n                      color=\"danger\"\n                      // key={markerItem.date}\n                      id={data._id}\n                      className=\"remove-btn location-lists\"\n                      onClick={this.deleteItem}>\n                      Delete\n                    </Button>\n                  </ListGroupItem>\n                </ListGroup>\n              </Col>\n            \n         \n        );\n      });\n      return <div> <Container><Row>{finalArr} </Row></Container></div>;\n    } else {\n      return null;\n    }\n  }\n}\n","import React from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport './myHeader.css'\n\nconst MyHeader = () => {\n  return (\n    <div id='myHeader'>\n      <Jumbotron fluid>\n        <Container fluid>\n          <h1 className=\"display-3\">Emslie Test Deployment</h1>\n          <p className=\"lead\">The React frontend is deployed on Github Pages and the node backend is deployed on Heroku with a MongoDB</p>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default MyHeader;","import React from 'react';\n\nimport MyForm from '../MyForm/MyForm';\nimport DataList from '../DataList/DataList';\nimport MyHeader from '../MyHeader/MyHeader';\n\n// import axios from 'axios'\n\nexport default class Example extends React.Component {\n  state = {\n    formInfo: {\n      name: '',\n      comment: ''\n    },\n    dataList: {\n      fetchArr: [],\n      hasLoaded: false\n    }\n  };\n\n  passUp = e => {\n    console.log(e)\n    this.setState({\n      formInfo: {\n        name: e.name,\n        comment: e.comment\n      }\n\n    })\n  };\n\n  render() {\n    const { name, comment } = this.state.formInfo;\n    return (\n      <>\n        <MyHeader />\n        <MyForm passUp={this.passUp} name={name} comment={comment}/>\n        <DataList />\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport Layout from './components/Layout/Layout';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}