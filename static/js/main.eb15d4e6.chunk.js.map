{"version":3,"sources":["components/MyForm/MyForm.jsx","components/DataList/DataList.jsx","components/MyHeader/MyHeader.jsx","components/Layout/Layout.jsx","App.js","serviceWorker.js","index.js"],"names":["MyForm","react_default","a","createElement","Form","id","FormGroup","Label","for","Input","onChange","this","props","formChanged","type","value","name","placeholder","comment","Button","onClick","formSubmit","React","Component","DataList","fetchHeroku","_this","propsTwo","dataList","hasLoaded","finalArr","fetchArr","map","data","index","Col","key","_id","xs","sm","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","date","color","className","deleteItem","Container","Row","MyHeader","Jumbotron","fluid","Layout","state","formInfo","e","_e$target","target","setState","prevState","Object","objectSpread","defineProperty","_callee","result","regenerator_default","wrap","_context","prev","next","axios","post","sent","concat","toConsumableArray","t0","console","log","error","stop","_callee2","delID","deleteResult","_context2","getAttribute","delete","fetch","then","res","json","_this$state$formInfo","Fragment","components_MyHeader_MyHeader","MyForm_MyForm","DataList_DataList","clearForm","App","Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb15d4e6.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\n\n\nexport default class MyForm extends React.Component {\n  render() {\n    return (\n      <Form id=\"myForm\">\n        <FormGroup>\n          <Label for=\"userName\">Name</Label>\n          <Input onChange={this.props.formChanged} type=\"text\" value={this.props.name} name=\"name\" id=\"userName\" placeholder=\"enter your name\" />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleText\">Comment</Label>\n          <Input onChange={this.props.formChanged} type=\"textarea\" name=\"comment\" value={this.props.comment} id=\"exampleText\" placeholder=\"please leave a comment\"/>\n        </FormGroup>\n        <Button onClick={this.props.formSubmit}>Submit</Button>\n      </Form>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  ListGroupItemText,\n  Button,\n  Container,\n  Row,\n  Col\n} from 'reactstrap';\n\nexport default class DataList extends Component {\n\n  componentDidMount() {\n    this.props.fetchHeroku();\n  }\n\n  render() {\n    if (this.props.propsTwo.dataList.hasLoaded) {\n      const { fetchArr } = this.props.propsTwo.dataList;\n\n      //!\n      //!Where would I put the key for the map function\n      //!\n      const finalArr = fetchArr.map((data, index) => {\n        return (\n              <Col key={data._id} xs=\"6\" sm=\"4\">\n                <ListGroup id=\"myListGroup\">\n                  <ListGroupItem>\n                    <ListGroupItemHeading>{data.name}</ListGroupItemHeading>\n                    <ListGroupItemText>{data.comment}</ListGroupItemText>\n                    <ListGroupItemText>{data.date}</ListGroupItemText>\n                    <Button\n                      type=\"submit\"\n                      color=\"danger\"\n                      id={data._id}\n                      className=\"remove-btn location-lists\"\n                      onClick={this.props.deleteItem}>\n                      Delete\n                    </Button>\n                  </ListGroupItem>\n                </ListGroup>\n              </Col>\n            \n         \n        );\n      });\n      return <div> <Container><Row>{finalArr} </Row></Container></div>;\n    } else {\n      return null;\n    }\n  }\n}\n","import React from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport './myHeader.css'\n\nconst MyHeader = () => {\n  return (\n    <div id='myHeader'>\n      <Jumbotron fluid>\n        <Container fluid>\n          <h1 className=\"display-3\">Emslie Test Deployment</h1>\n          <p className=\"lead\">The React frontend is deployed on Github Pages and the node backend is deployed on Heroku with a MongoDB</p>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default MyHeader;","import React from 'react';\n\nimport MyForm from '../MyForm/MyForm';\nimport DataList from '../DataList/DataList';\nimport MyHeader from '../MyHeader/MyHeader';\nimport axios from 'axios';\n\n// Your parent component manages the state that is the props for all child components.\n// This .setState on the parent component will update all of the props for child components.\n\n// Also a child component can modify the parent component by calling the\n// Parent component function that was passed in as props.\n// That function usually does this.setState and is called by people at my old company a toaster function.\n\nexport default class Layout extends React.Component {\n  state = {\n    formInfo: {\n      name: '',\n      comment: ''\n    },\n    dataList: {\n      fetchArr: [],\n      hasLoaded: false\n    }\n  };\n\n  // DataList functions:\n\n  //Updates the State as user types in text field of form\n  formChanged = e => {\n    const { name, value } = e.target;\n    this.setState(prevState => ({\n      formInfo: {\n        ...prevState.formInfo,\n        [name]: value\n      }\n    }));\n  };\n\n  // onclick event from the submit button of the form\n  formSubmit = async e => {\n    try {\n      const result = await axios.post(\n        'https://trash-server-rte.herokuapp.com/api/testData',\n        {\n          name: this.state.formInfo.name,\n          comment: this.state.formInfo.comment\n        }\n      );\n      await this.setState(state => {\n        const newFetchArr = [result.data, ...state.dataList.fetchArr];\n        return {\n          formInfo: {\n            name: '',\n            comment: ''\n          },\n          dataList: {\n            fetchArr: newFetchArr,\n            hasLoaded: true\n          }\n        };\n      });\n    } catch (error) {\n      console.log('Update failed', { error });\n    }\n  };\n\n\n  deleteItem = async e => {\n    try {\n      const delID = e.target.getAttribute('id');\n      const deleteResult = await axios.delete(`https://trash-server-rte.herokuapp.com/api/testData/${delID}`)\n      await this.setState(state => {\n        const newFetchArr = [deleteResult.data, ...state.dataList.fetchArr];\n        return {\n          dataList: {\n            fetchArr: newFetchArr,\n            hasLoaded: true\n          }\n        };\n      });\n      this.fetchHeroku();\n    } catch (error) {\n      console.log('Delete failed', { error });\n    }\n  };\n\n\n\n  fetchHeroku = () => {\n    console.log('GET');\n    fetch('https://trash-server-rte.herokuapp.com/api/testData')\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          dataList: { fetchArr: res, hasLoaded: true }\n        });\n      });\n  };\n\n  render() {\n    const { name, comment } = this.state.formInfo;\n    return (\n      <>\n        <MyHeader />\n        <MyForm\n          name={name}\n          comment={comment}\n          formChanged={this.formChanged}\n          formSubmit={this.formSubmit}\n        />\n        <DataList\n          propsTwo={this.state}\n          formChanged={this.formChanged}\n          formSubmit={this.formSubmit}\n          clearForm={this.clearForm}\n          deleteItem={this.deleteItem}\n          fetchHeroku={this.fetchHeroku}\n        />\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport Layout from './components/Layout/Layout';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}